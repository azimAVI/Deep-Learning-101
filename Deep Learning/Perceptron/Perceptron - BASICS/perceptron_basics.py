# -*- coding: utf-8 -*-
"""perceptron_basics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16sTARxunLzpI7wP-Pab9euP3ZIaFUZ4P
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('placement.csv')

print(df.shape)
df.head()

sns.scatterplot(x=df['cgpa'],y=df['resume_score'],hue=df['placed'])

""" **This scatter plot aims to visualize the relationship between CGPA, resume score, and placement status.
  By examining the plot, you can assess if there are any discernible patterns or trends between these variables.
  For example, you might observe that higher CGPA and resume scores tend to be associated with a greater likelihood of placement (indicated by the color distinction).**
"""

x = df.iloc[:,0:2]
y = df.iloc[:,-1]

print(x)  //

print(y)

from sklearn.linear_model import Perceptron
p = Perceptron()

"""#**Importing Perceptron class from scikit learn**
---
The provided code snippet demonstrates the usage of the Perceptron class from
scikit-learn's sklearn.linear_model module. It imports the Perceptron class and creates an instance of it called p. The Perceptron algorithm is a linear classification model used for binary classification tasks. Once the Perceptron object is created, it can be used to fit the model to training data, make predictions on new data, and evaluate the model's performance using metrics such as accuracy. Preprocessing, splitting the data, and feature engineering should be done before fitting the model and making predictions.
"""

p.fit(x,y)  #training our model

p.coef_  # getting values of weigths w1 and w2

p.intercept_ # getting value of 'b' for the summation

pip install mlxtend --upgrade --no-deps

from mlxtend.plotting import plot_decision_regions

"""# **Creating Region Plot for our model to showcase the data graphically**


---


The code snippet utilizes the plot_decision_regions function from the mlxtend.
plotting module. This function allows you to visualize decision boundaries in classification problems. It takes a trained classifier, feature matrix, and target array as input. By calling the function with the appropriate parameters, it generates a plot showing the decision regions and boundaries based on the provided data and classifier. The function helps in gaining insights into how a classifier separates different classes in a dataset.
"""



plot_decision_regions(x.values, y.values, clf = p, legend = 2)